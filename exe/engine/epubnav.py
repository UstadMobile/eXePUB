'''
Created on Jan 1, 2016

@author: mike
'''
from lxml import etree


class EPUBNavItem(object):
    
    PREFIX_EPUB = "http://www.idpf.org/2007/ops"
    
    #TODO: Make children and all node properties dynamically generated by looking to the xml
    def __init__(self, opf, epub_item = None, li_item = None):
        self.opf = opf
        self.li_item = None
        self._epub_item = None
        
        if epub_item:
            self._epub_item = epub_item
        elif li_item:
            self.li_item = li_item
        
    
    
    @property
    def epub_item(self):
        if self._epub_item:
            return self._epub_item
        
        my_href = self.href 
        self._epub_item = self.opf.get_item_by_href(my_href)
        return self._epub_item
    
    def find_node(self, node_id):
        if self.id == node_id:
            return self
        
        if self.children:
            for child in self.children:
                result = child.find_node(node_id)
                if result:
                    return result
        
        return None
    
    def _get_child_by_tagname(self, el, tagname):
        """etree workaround for misbehaving {*} 
        """
        taglen = len(tagname) + 1
        tagmatch = "}%s" % tagname
        for child in el:
            if child.tag[-taglen:] == tagmatch:
                return child
                
        return None
    
    @property
    def title(self):
        """According to the EPUB Navigation document spec: the li_item
        must contain either a single a element or a single span element:
        the text content of which is the title
        """
        if self.li_item is not None:
            title_el = self._get_child_by_tagname(self.li_item, "a")
            if title_el is not None:
                return title_el.text
            title_el = self._get_child_by_tagname(self.li_item, "span")
            if title_el is not None:
                return title_el.text
        
        '''
        'We must be the navigation element which isn't nessasarily itself
         in the table of contents
         '''
        return ""
    
    @property     
    def href(self):
        if self._epub_item:
            return self._epub_item.href 
        elif self.li_item is not None:
            a_el = self._get_child_by_tagname(self.li_item, "a")
            if a_el is not None:
                return a_el.get("href")
    
    @property
    def id(self):
        return self.epub_item.id

    @property
    def children(self):
        #todo: fix me
        return []

    def process_ol(self, ol_element):
        result = []
        # get a list of all child el
        for child in ol_element:
            #technically all children should be li
            if child.tag[-2:] == "li":
                result.append(EPUBNavItem(self.opf, li_item = child))
                
        return result
    

class EPUBNavDocument(EPUBNavItem):
    '''
    classdocs
    '''


    def __init__(self, opf, epub_item, navdoc_src = None):
        '''
        Constructor
        '''
        EPUBNavItem.__init__(self, opf, epub_item = epub_item)
        self.navdoc_el = etree.fromstring(navdoc_src)
        self.toc_el = None
        nav_els = self.navdoc_el.xpath(".//*[local-name() = 'nav']")
        for nav in nav_els:
            nav_type = nav.get("{%s}type" % EPUBNavItem.PREFIX_EPUB)
            if nav_type == "toc":
                self.toc_el = nav
                break
        
    
    @property
    def children(self):
        #According to the epub spec; the child of the nav element must be a single ol list
        ol_el = self.toc_el.xpath("./*[local-name() = 'ol']")
        if len(ol_el):
            return self.process_ol(ol_el[0])
     
    

    
        